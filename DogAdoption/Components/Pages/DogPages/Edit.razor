@page "/Dogs/edit"

@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Dog</h4>
<hr />
@if (Dog is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Dog" OnValidSubmit="UpdateDog" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Dog.Id" value="@Dog.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Dog.Name" class="form-control" />
                    <ValidationMessage For="() => Dog.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="breed" class="form-label">Breed:</label>
                    <InputText id="breed" @bind-Value="Dog.Breed" class="form-control" />
                    <ValidationMessage For="() => Dog.Breed" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="age" class="form-label">age:</label>
                    <InputNumber id="age" @bind-Value="Dog.age" class="form-control" />
                    <ValidationMessage For="() => Dog.age" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="imageurl" class="form-label">ImageUrl:</label>
                    <InputText id="imageurl" @bind-Value="Dog.ImageUrl" class="form-control" />
                    <ValidationMessage For="() => Dog.ImageUrl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Dog.Description" class="form-control" />
                    <ValidationMessage For="() => Dog.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="healthstatus" class="form-label">HealthStatus:</label>
                    <InputText id="healthstatus" @bind-Value="Dog.HealthStatus" class="form-control" />
                    <ValidationMessage For="() => Dog.HealthStatus" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="temperament" class="form-label">Temperament:</label>
                    <InputText id="temperament" @bind-Value="Dog.Temperament" class="form-control" />
                    <ValidationMessage For="() => Dog.Temperament" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/dogs">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Dog? Dog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Dog ??= await context.Dog.FirstOrDefaultAsync(m => m.Id == Id);

        if (Dog is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateDog()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Dog!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DogExists(Dog!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/dogs");
    }

    bool DogExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Dog.Any(e => e.Id == id);
    }
}
