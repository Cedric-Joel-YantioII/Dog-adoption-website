@page "/register"

@using Microsoft.EntityFrameworkCore
@using DogAdoption.Models
@inject IDbContextFactory<DogAdoption.Data.DogAdoptionContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Register User</PageTitle>

<h1>Register Admin User</h1>

<hr />

@if (showMessage == true)
{
    <div class="alert alert-success" role="alert">
        You have been registered! Please navigate back to the login page.
    </div>
}

<EditForm Model="@adminUser" OnValidSubmit="@HandleRegister" FormName="adminRegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="adminUser.Username" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="adminUser.Password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private AdminUser adminUser { get; set; } = new AdminUser();
    private bool showMessage = false;

    private async Task HandleRegister()
    {
        try
        {
            Console.WriteLine($"Username: {adminUser.Username}, Password: {adminUser.Password}");

            using var dbContext = DbFactory.CreateDbContext();
            dbContext.AdminUser.Add(adminUser);
            await dbContext.SaveChangesAsync();

            showMessage = true;
            StateHasChanged();


        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., log it, display an error message)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}




